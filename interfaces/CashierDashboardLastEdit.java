/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaces;

import java.awt.print.PrinterException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import codes.DBconnect;
import java.awt.Image;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.*;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import java.util.HashMap;
import java.util.Map;

import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author ASUS
 */


import codes.DBconnect;
//import java.awt.Image;
import java.io.ByteArrayOutputStream;
//import java.io.File;
//import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.*;
import java.util.Calendar;
//import javax.swing.Icon;
//import javax.swing.ImageIcon;
//import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
//import java.sql.Date;
import java.util.Date;


public class CashierDashboardLastEdit extends javax.swing.JFrame {
    Connection conn;
    ResultSet rs;
    PreparedStatement pst;
    
    float price=0;
    String title="";
    float total=0;
    float subTotal=0;
    float rate;
    float stotal=0;
   // float netPay=0;
    //float discount=0;
    //txtISBN_NO
    
    
    private static final String TABLE_NAME = "discounts";
    private static final String AMOUNT_COLUMN = "amount";
    private static final String DISCOUNT_RATE_COLUMN = "Drate";
    float Ramount =0;
    //float discountRate =0;
    float RdiscountRate=0;
    float totalDiscount=0;
    float netValue=0;
    //float subTotal;
    float STotal=0;
    
    /**
     * Creates new form CashierDashboard
     */
    public CashierDashboardLastEdit() {
        initComponents();
        billhead();
        conn=DBconnect.connect();
        Calendar specificDate=Calendar.getInstance();
            specificDate.set(2023,Calendar.DECEMBER,18);
            jDateChooser1.setDate(specificDate.getTime());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    //pppppppp
    public float  returnPrice(){
        
        //float isbn = Float.parseFloat(txtISBN_NO.getText());
        String isbn=txtISBN_NO.getText();
        try {
        String sql = "SELECT price FROM books WHERE ISBN_NO = ?";
        pst = conn.prepareStatement(sql);
        pst.setString(1,isbn);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            float Price = rs.getFloat("price");

           // txtOp.setText(String.valueOf(price));
            
            //txtOQ.setText(String.valueOf(quantity));
            price=Price;
            
        } else {
            JOptionPane.showMessageDialog(null, "Book with ID " + isbn + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
        
        return price;
    }
    
     public String returnTitle(){
        
        //float isbn = Float.parseFloat(txtISBN_NO.getText());
        String isbn=txtISBN_NO.getText();
        try {
        String sql = "SELECT Title FROM books WHERE ISBN_NO = ?";
        pst = conn.prepareStatement(sql);
        pst.setString(1,isbn);
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            //float Price = rs.getFloat("price");
            String Title=rs.getString("Title");
           // txtOp.setText(String.valueOf(price));
            
            title=Title;
            
            //txtOQ.setText(String.valueOf(quantity));
        } else {
            JOptionPane.showMessageDialog(null, "Book with ID " + isbn + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error occurred: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
        
        return title;
    }
     
     
    public float returnTotal(){
        returnPrice();
        //int ratenum,qtynum,ans;
       // int qtynum;
       // float ans;
        //ratenum = Integer.parseInt(rate.getText());
       // qtynum = Integer.parseInt(qty.getText());
       // ans =  price* qtynum;
       // total=ans;
        //edited
        total=total+price;
        return total;
    }
    
    
    
    
     
     public float returnRate(){
         
         return rate;
     }
    //pppppppp
    
    
    
     //quantity problem solvinggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
     /*
     //import java.sql.Connection;
//import java.sql.DriverManager;
//import java.sql.PreparedStatement;
//import java.sql.ResultSet;
//import java.sql.SQLException;
//import java.util.HashMap;
//import java.util.Map;

//public class InvoiceChecker {

    // JDBC URL, username, and password of your MySQL server
   // private static final String JDBC_URL = "jdbc:mysql://your_database_url";
    //private static final String USERNAME = "your_username";
    //private static final String PASSWORD = "your_password";

    //public static void main(String[] args) {
     public static q(){
        try {
            // Step 1: Connect to the database
            //Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);

            // Step 2: Retrieve different ISBN_NO values and check quantity
            Map<String, Integer> isbnQuantityMap = getIsbnQuantities(conn);

            // Step 3: Display the results
            for (Map.Entry<String, Integer> entry : isbnQuantityMap.entrySet()) {
                System.out.println("ISBN_NO: " + entry.getKey() + ", Quantity: " + entry.getValue());
            }

            // Step 4: Close the connection
            //connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static Map<String, Integer> getIsbnQuantities( conn) throws SQLException {
        Map<String, Integer> isbnQuantityMap = new HashMap<>();

        String query = "SELECT ISBN_NO, SUM(quantity) AS total_quantity FROM invoice GROUP BY ISBN_NO";

        try (PreparedStatement statement = conn.prepareStatement(query);
              rs = statement.executeQuery()) {

            while (resultSet.next()) {
                String isbnNo = rs.getString("ISBN_NO");
                int quantity = rs.getInt("total_quantity");

                isbnQuantityMap.put(isbnNo, quantity);
            }
        }

        return isbnQuantityMap;
    }

//}
     //end quantity problem solvingggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
     
    */
    //kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
          /*
     //quantity problem solvinggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
     import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

//public class InvoiceChecker {

    // JDBC URL, username, and password of your MySQL server
   // private static final String JDBC_URL = "jdbc:mysql://your_database_url";
    //private static final String USERNAME = "your_username";
    //private static final String PASSWORD = "your_password";

    //public static void main(String[] args) {
        try {
            // Step 1: Connect to the database
            //Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);

            // Step 2: Retrieve different ISBN_NO values and check quantity
            Map<String, Integer> isbnQuantityMap = getIsbnQuantities(conn);

            // Step 3: Display the results
            for (Map.Entry<String, Integer> entry : isbnQuantityMap.entrySet()) {
                System.out.println("ISBN_NO: " + entry.getKey() + ", Quantity: " + entry.getValue());
            }

            // Step 4: Close the connection
            //connection.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
   // }

    private static Map<String, Integer> getIsbnQuantities( conn) throws SQLException {
        Map<String, Integer> isbnQuantityMap = new HashMap<>();

        String query = "SELECT ISBN_NO, SUM(quantity) AS total_quantity FROM invoice GROUP BY ISBN_NO";

        try (PreparedStatement statement = conn.prepareStatement(query);
              rs = statement.executeQuery()) {

            while (resultSet.next()) {
                String isbnNo = rs.getString("ISBN_NO");
                int quantity = rs.getInt("total_quantity");

                isbnQuantityMap.put(isbnNo, quantity);
            }
        }

        return isbnQuantityMap;
    }
//}
     //end quantity problem solvingggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg
     */   
    //kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk
    
    public void billtotable()
    {
       try{
          
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel)jTable1.getModel();
        
        returnPrice();
        returnTitle();
        total();
        //returnTotal();
        model.addRow(new Object[]
        {
        model.getRowCount()+1,
        txtISBN_NO.getText(),
        title,
        price,
        qty.getText(),
        total
        
        });  
    
    
         //Get sub total
        float sum=0;
        for(int i=0; i<jTable1.getRowCount(); i++)
        {
            
            sum = sum+Float.parseFloat(jTable1.getValueAt(i, 5).toString());
            subtotal.setText(Float.toString(sum));
        }  
            
        }catch(Exception e){
             JOptionPane.showMessageDialog(null, "error " + e.getMessage());
        }
       

        
    }
    
    
    //Discounts
     private static boolean hasRows(Connection connection, String discounts) throws SQLException {
        String query = "SELECT COUNT(*) FROM " + discounts;
        try (PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {
            if (resultSet.next()) {
                return resultSet.getInt(1) > 0;
            }
        }
        return false;
    }

    private  float retrieveDataAmount(Connection conn, String discounts) throws SQLException {
        
        String query = "SELECT * FROM " + discounts;
        try (PreparedStatement statement = conn.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                 float amount = resultSet.getFloat(AMOUNT_COLUMN);
                 float discountRate = resultSet.getFloat(DISCOUNT_RATE_COLUMN);
                 Ramount=amount;
                // Do something with the retrieved data
                
            }
        }
        
        return Ramount;
        
    }
    
    //RDiscount
    private  float retrieveDataDiscount(Connection conn, String discounts) throws SQLException {
        String query = "SELECT * FROM " + discounts;
        try (PreparedStatement statement = conn.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                float amount = resultSet.getFloat(AMOUNT_COLUMN);
                float discountRate = resultSet.getFloat(DISCOUNT_RATE_COLUMN);
                RdiscountRate=discountRate;
                // Do something with the retrieved data
                //System.out.println("Amount: " + amount + ", Discount Rate: " + discountRate);
            }
        }
       
        return RdiscountRate;
    }
    //end discounts
    
    public void clear()
    {
     txtISBN_NO.setText("");
     //bname.setText("");
     //rate.setText("");
     qty.setText("");
     //total.setText("");
    }
    
    public void billhead()
    {
        bill.setText("****************CHAPTERS BOOK SHOP****************\n"
        +"                 Contact Number : xxxxxxxxxx   \n"
        +"                   Address : No.756, Kelaniya  \n"
        +"------------------------------------------------------------------------"
                + "\nISBN_NO\tQty\tPrice\tTotal");
    }
    
    public void bill()
    {
       /* returnPrice();
        returnTitle();
        returnTotal();
        String a="jjj";
        String b="mmm";
        String c="lll";*/
       // bill.setText(bill.getText()+"\n"+txtISBN_NO.getText()+"\t"+txtISBN_NO.getText()+"\t"+txtISBN_NO.getText()+"\t"+txtISBN_NO.getText());
         bill.setText(bill.getText()+"\n"+txtISBN_NO.getText()+"\t"+txtISBN_NO.getText()+"\t"+txtISBN_NO.getText()+"\t"+txtISBN_NO.getText());
        
         //bill.setText(bill.getText()+"\n"+bname.getText()+"\t"+qty.getText()+"\t"+rate.getText()+"\t"+total.getText());
    }
    
    
    
    public float total(){
        int qtynum;
        float ans;
        //ratenum = Integer.parseInt(rate.getText());
        qtynum = Integer.parseInt(qty.getText());
        ans =  price* qtynum;
        total=ans;
        return total;
    }
    
    public float returnsubtotal()
    {
        String STotal=subtotal.getText();
        
        return subTotal;
    }
    
    //new method for quantity substract
        // Method to update sold quantities in the database
    private void updateSoldQuantities() {
        try {
            String updateQuery = "UPDATE invoice "
                    + "SET quantity = quantity - (SELECT COALESCE(SUM(quantity), 0) "
                    + "FROM invoice AS sub "
                    + "WHERE sub.ISBN_NO = invoice.ISBN_NO) "
                    + "WHERE ISBN_NO IN (SELECT DISTINCT ISBN_NO FROM invoice)";

            PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
            updateStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating sold quantities: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    //new method for quantity substract
    
    private void updateBooksTable(String isbn, int quantityToRemove) {
    try {
        String updateQuery = "UPDATE books SET quantity = quantity + ? WHERE ISBN_NO = ?";
        PreparedStatement updateStatement = conn.prepareStatement(updateQuery);
        updateStatement.setInt(1, quantityToRemove);
        updateStatement.setString(2, isbn);
        updateStatement.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error updating quantity in books table: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }
    
    
    
    
    
    
    //inser method
    public void insert(){
        try{
            
           
            
            int sid=Integer.parseInt(txtBillNo.getText());
            java.util.Date utilDate=jDateChooser1.getDate();
            java.sql.Date sqlDate=new java.sql.Date(utilDate.getTime());
            
            //float sTotl=Float.parseFloat(subtotal.getText());
            
           //discount=Float.parseFloat(subtotal.getText());
           // netPay=Float.parseFloat(subtotal.getText());
            ///insert into books(ISBN_NO,title,author,category,publisher,publicationYear,price,languageOfBook,quantity,description,Image)values (?,?,?,?,?,?,?,?,?,?,?)
            String sqll="insert into sales(Sid,Date,Total,Dicount,net_Ammount)values (?,?,?,?,?)";
            
            pst=conn.prepareStatement(sqll);
            
           pst.setInt(1,sid);
           pst.setDate(2, sqlDate);
           pst.setFloat(3,  STotal);
           pst.setFloat(4, totalDiscount);
            pst.setFloat(5, netValue);
          // float netValue=0;
           //pst.executeUpdate();
           //pst = conn.prepareStatement(sql1);

           /* 
            float price=0;
    String title="";
    float total=0;
    float subTotal=0;
    float rate;
    float stotal=0;*/
            

            
            pst.executeUpdate();
           // pst.execute();
           
            JOptionPane.showMessageDialog(null,"Transaction successful!");
                        // Call the method to update sold quantities after a successful transaction
            updateSoldQuantities();


        }catch(Exception e){
            JOptionPane.showMessageDialog(null,e);
            JOptionPane.showMessageDialog(null,"not okay");

            //e.printStackTrace();
        }
    }
    
    
    public void updateRowCountNumbers(DefaultTableModel model) {
    for (int i = 0; i < model.getRowCount(); i++) {
        model.setValueAt(i + 1, i, 0); // Assuming first column (index 0) is the row number
    }
    }
    
    //--
   private void removeFromBill(String rowToRemove) {
    String currentBillText = bill.getText();
    int indexOfRowToRemove = currentBillText.indexOf(rowToRemove);
    
    if (indexOfRowToRemove != -1) {
        // Find the starting index of the line containing the row to remove
        int startIndexOfLine = currentBillText.lastIndexOf("\n", indexOfRowToRemove) + 1;
        
        // Find the ending index of the line containing the row to remove
        int endIndexOfLine = currentBillText.indexOf("\n", indexOfRowToRemove);
        if (endIndexOfLine == -1) {
            endIndexOfLine = currentBillText.length();
        }
        
        // Remove the line containing the row from the bill textarea
        bill.setText(currentBillText.substring(0, startIndexOfLine) + currentBillText.substring(endIndexOfLine).trim());
    }
   }
    //--
    public void removeRowByColumnValue(DefaultTableModel model, int column, Object value) {
    for (int i = 0; i < model.getRowCount(); i++) {
        if (model.getValueAt(i, 0).equals(value)) {
            float removedTotal = Float.parseFloat(model.getValueAt(i, 5).toString());
             String rowToRemove = String.format("%s\t%s\t%s\t%s", 
                    model.getValueAt(i, 1), model.getValueAt(i, 4), model.getValueAt(i, 3), model.getValueAt(i, 5));

            removeFromBill(rowToRemove);
            model.removeRow(i);
             // Subtract the removed total from the subtotal
            //String STotal=subtotal.getText();
            //int STotal=Integer.parseInt(subtotal.getText());
            float currentSubtotal = Float.parseFloat(subtotal.getText());
            float newSubtotal = currentSubtotal - removedTotal;
            subtotal.setText(Float.toString(newSubtotal));
            stotal=newSubtotal;
            // Update row numbers
            updateRowCountNumbers(model);
            

            break; // Assuming you want to remove only the first occurrence
        }
    }
    
}
    
    
   
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        dateChooserPanel1 = new com.toedter.calendar.demo.DateChooserPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtISBN_NO = new javax.swing.JTextField();
        qty = new javax.swing.JTextField();
        addBTN = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtBillNo = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        ramount = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        bill = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        subtotal = new javax.swing.JTextField();
        btnBalance = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtCash = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtItomNo = new javax.swing.JTextField();
        txtRemove = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        jButton5.setText("jButton5");

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Billing Interface");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 204));
        jLabel1.setText(" CHAPTERS Book Shop");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 450, 30));

        jPanel2.setBackground(new java.awt.Color(0, 102, 255,80));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0,80)));
        jPanel2.setFocusable(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Invoice No");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Date");

        txtISBN_NO.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtISBN_NO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtISBN_NOActionPerformed(evt);
            }
        });

        qty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        qty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtyActionPerformed(evt);
            }
        });

        addBTN.setBackground(new java.awt.Color(0, 0, 0));
        addBTN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addBTN.setForeground(new java.awt.Color(255, 255, 255));
        addBTN.setText("ADD");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        jDateChooser1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Quantity");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ISBN_NO");

        txtBillNo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtBillNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBillNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addBTN)
                .addGap(211, 211, 211))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtISBN_NO, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                        .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBillNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(142, 142, 142))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBillNo, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(txtISBN_NO, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qty, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(addBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 550, 240));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Itom No", "ISBN_NO", "Title", "Price", "Quantity", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 340, 550, 140));

        ramount.setBackground(new java.awt.Color(153, 51, 0));
        ramount.setForeground(new java.awt.Color(204, 204, 204));

        bill.setColumns(20);
        bill.setRows(5);
        jScrollPane2.setViewportView(bill);

        jButton2.setBackground(new java.awt.Color(0, 0, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Print");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Sub Total");

        subtotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        subtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtotalActionPerformed(evt);
            }
        });

        btnBalance.setBackground(new java.awt.Color(0, 0, 0));
        btnBalance.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnBalance.setForeground(new java.awt.Color(255, 255, 255));
        btnBalance.setText("Balance");
        btnBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBalanceActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Cash");

        txtCash.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtCash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCashActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Itom No");

        txtItomNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtItomNoActionPerformed(evt);
            }
        });

        txtRemove.setBackground(new java.awt.Color(0, 0, 0));
        txtRemove.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        txtRemove.setForeground(new java.awt.Color(255, 255, 255));
        txtRemove.setText("Remove");
        txtRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ramountLayout = new javax.swing.GroupLayout(ramount);
        ramount.setLayout(ramountLayout);
        ramountLayout.setHorizontalGroup(
            ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ramountLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(ramountLayout.createSequentialGroup()
                        .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtItomNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subtotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ramountLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCash, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btnBalance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtRemove, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(31, 31, 31))
            .addGroup(ramountLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ramountLayout.setVerticalGroup(
            ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ramountLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtItomNo)
                        .addComponent(jLabel10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ramountLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btnBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(105, 105, 105))
        );

        jPanel1.add(ramount, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 90, 340, 390));

        jButton7.setBackground(new java.awt.Color(0, 0, 0));
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("Log Out");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 20, 90, -1));

        jButton8.setBackground(new java.awt.Color(0, 0, 0));
        jButton8.setForeground(new java.awt.Color(255, 255, 255));
        jButton8.setText("Search");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 20, 90, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cashierBlu.jpg"))); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, -4, 940, 550));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 950, 540));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        // TODO add your handling code here:
        //float stotal=0;
        int q=0;
        int nowq=Integer.parseInt(qty.getText());
        returnPrice();
        total();
        //int ratenum,qtynum,ans;
        int qtynum;
        float ans;
        //ratenum = Integer.parseInt(rate.getText());
        qtynum = Integer.parseInt(qty.getText());
        ans =  price* qtynum;
        
        
        bill.setText(bill.getText()+"\n"+txtISBN_NO.getText()+"\t"+qty.getText()+"\t"+price+"\t"+total);
        
        billtotable();
         //clear();
        stotal=stotal+total;
        subtotal.setText(String.valueOf(stotal));

        //txtISBN_NO.setText(""); 
        //qty.setText(""); 
        
        //to update quantity
        String isbnno=txtISBN_NO.getText();
        try{
        
            String sql = "SELECT quantity FROM books WHERE ISBN_NO = ?";
        pst = conn.prepareStatement(sql);
        pst.setString(1,isbnno );
        ResultSet rs = pst.executeQuery();

        if (rs.next()) {
            int nq= rs.getInt("quantity");
            q=nq-nowq;
           
        } else {
            JOptionPane.showMessageDialog(null, "Book with ID " + isbnno + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }catch(Exception e){
            e.printStackTrace();
        }
        
       //update  
    try{
        String sql2="update books set quantity=? where ISBN_NO=?";
         pst = conn.prepareStatement(sql2);
            pst.setFloat(1, q);
            pst.setString(2, isbnno);
            int rowsAffected = pst.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Updated quantity");
            } else {
                JOptionPane.showMessageDialog(null, "No records updated");
            }
    }catch(Exception e){
            e.printStackTrace();
        }
        
    clear();
      
        
    }//GEN-LAST:event_addBTNActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:
            bill.print();
            subtotal.setText("");
            txtCash.setText("");
            bill.setText("");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 
            insert();
            stotal=0;
            billhead();
            txtBillNo.setText("");
            Calendar specificDate=Calendar.getInstance();
            specificDate.set(2023,Calendar.DECEMBER,18);
            jDateChooser1.setDate(specificDate.getTime());
        } catch (PrinterException ex) {
            JOptionPane.showMessageDialog(null,"Sorry. Can not print.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBalanceActionPerformed
        // TODO add your handling code here:
        /*bill.setText(bill.getText()+"\n\n	
        Return amount :   "+" Rs."+ramount.getText());*/
        
        // TODO add your handling code here:
         STotal= Float.parseFloat(subtotal.getText());
        // Database table and columns
        
         
         try {
            // Step 1: Connect to the database
            //Connection connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
               
            // Step 2: Check if there are rows in the table
            
             if (hasRows(conn, TABLE_NAME)) {
                 //float totalDiscount = 0;
                  
            // Step 3: Retrieve data if rows exist
              try (PreparedStatement statement = conn.prepareStatement("SELECT * FROM " + TABLE_NAME);
                 ResultSet resultSet = statement.executeQuery()) {

                while (resultSet.next()) {
                    float amount = resultSet.getFloat(AMOUNT_COLUMN);
                    float discountRate = resultSet.getFloat(DISCOUNT_RATE_COLUMN);

                    // Check if subtotal is greater than the amount for the current row
                    if (STotal > amount) {
                        // Calculate discount for the current row
                        float discount = STotal * (discountRate / 100);
                        totalDiscount += discount;
                    }
                }  
               }

           /* if (hasRows(conn, TABLE_NAME)) {
                //jTextField1.setText("hi");                // Step 3: Retrieve data if rows exist
                retrieveDataAmount(conn, TABLE_NAME);
                retrieveDataDiscount(conn, TABLE_NAME);
                float Ldiscount=(STotal*(RdiscountRate/100));
                
                txtD.setText(String.valueOf(Ldiscount));
                
             */   
              
               // Step 4: Update UI with the total discount
           // txtD.setText(String.valueOf(totalDiscount));  
            
            netValue=STotal-totalDiscount;
            String v=subtotal.getText();
            //String d =txtD.setText(String.valueOf(totalDiscount));  
            bill.setText(bill.getText()+"\n\n	                           Sub Total :   "+" Rs."+subtotal.getText());
            bill.setText(bill.getText()+"\n\n	                           Discount :     "+" Rs."+totalDiscount);
            bill.setText(bill.getText()+"\n\n	                           Net Value :     "+" Rs."+netValue);
            //
            

            //print test
            
            //"\nISBN_NO\tQty\tPrice\tTotal"
            //print test
            } else {
                System.out.println("No rows in the table.");
            }

            // Step 4: Close the connection
           // conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
        //befor
        try{
           
        /// Float STotal= Float.parseFloat(subtotal.getText());
         Float Cash= Float.parseFloat(txtCash.getText());
         if(Cash>STotal){
             float balance;
            //netValue
            balance=Cash-netValue;
             //lastEdit
             // Step 2: Check if there are rows in the table
             /*Float STotal= Float.parseFloat(subtotal.getText());
             if (hasRows(conn, TABLE_NAME)) {
                 float totalDiscount = 0;
                  
            // Step 3: Retrieve data if rows exist
              try (PreparedStatement statement = conn.prepareStatement("SELECT * FROM " + TABLE_NAME);
                 ResultSet resultSet = statement.executeQuery()) {

                while (resultSet.next()) {
                    float amount = resultSet.getFloat(AMOUNT_COLUMN);
                    float discountRate = resultSet.getFloat(DISCOUNT_RATE_COLUMN);

                    // Check if subtotal is greater than the amount for the current row
                    if (STotal > amount) {
                        // Calculate discount for the current row
                        float discount = STotal * (discountRate / 100);
                        totalDiscount += discount;
                    }
                }  
               }
                */
           
                
               // Step 4: Update UI with the total discount
            //txtD.setText(String.valueOf(totalDiscount));  
             //LasEdit
             //bill.setText(bill.getText()+"\n\n	                           Sub Total :   "+" Rs."+subtotal.getText());
             bill.setText(bill.getText()+"\n\n	                           Cash :         "+" Rs."+Cash);
             bill.setText(bill.getText()+"\n\n	                           Balance :     "+" Rs."+balance);
             //bill.setText(bill.getText()+"\n\n	                           Discount :     "+" Rs."+totalDiscount);
             //
             java.util.Date utilDate=jDateChooser1.getDate();
            java.sql.Date sqlDate=new java.sql.Date(utilDate.getTime());
            
            bill.setText(bill.getText() + "\nDate: " + sqlDate + "\n");
             //
         }
         
        }catch(Exception e){
            e.printStackTrace();
        }
        
        
        
         
         
        //String STotal=subtotal.getText();
        //txtCash
        
    }//GEN-LAST:event_btnBalanceActionPerformed

    private void txtISBN_NOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtISBN_NOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtISBN_NOActionPerformed

    private void txtBillNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBillNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBillNoActionPerformed

    private void qtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_qtyActionPerformed

    private void subtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subtotalActionPerformed

    private void txtCashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCashActionPerformed

    private void txtRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRemoveActionPerformed
        // TODO add your handling code here:
       // removeRowByColumnValue
              /*
               int itom=Integer.parseInt(txtItomNo.getText());
                removeRowByColumnValue((DefaultTableModel) jTable1.getModel(),0,itom);
                //txtItomNo.setText("");
                //update sub total
                
                
                updateRowCountNumbers((DefaultTableModel) jTable1.getModel());*/
                
               int itom=Integer.parseInt(txtItomNo.getText());
                
                //update quantity again
                try {
        //int itom = Integer.parseInt(txtItomNo.getText());

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRow = -1;

        // Find the selected row based on the itom number
        for (int i = 0; i < model.getRowCount(); i++) {
            if (Integer.parseInt(model.getValueAt(i, 0).toString()) == itom) {
                selectedRow = i;
                break;
            }
        }

        if (selectedRow != -1) {
            String isbn = model.getValueAt(selectedRow, 1).toString();
            int quantityToRemove = Integer.parseInt(model.getValueAt(selectedRow, 4).toString());

            // Call a method to update the books table with the retrieved ISBN_NO and quantity
            updateBooksTable(isbn, quantityToRemove);

            // Remove the row from jTable1
            removeRowByColumnValue(model, 0, itom);

            // Update sub total
            updateRowCountNumbers(model);
            JOptionPane.showMessageDialog(null, "Item is removed! " );
       
        } else {
            JOptionPane.showMessageDialog(null, "Item with itom number " + itom + " not found in the table.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        txtItomNo.setText("");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid itom number. Please enter a valid integer.", "Error", JOptionPane.ERROR_MESSAGE);
    }
               /* 
              // int itom=Integer.parseInt(txtItomNo.getText());
                removeRowByColumnValue((DefaultTableModel) jTable1.getModel(),0,itom);
                //txtItomNo.setText("");
                //update sub total
                
                
                updateRowCountNumbers((DefaultTableModel) jTable1.getModel());
                 txtItomNo.setText("");*/
                //update quantity again
        
        
    }//GEN-LAST:event_txtRemoveActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
                        setVisible(false);
                        Login ob1=new Login();
                        //ob1.setUpLoading();
                        ob1.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void txtItomNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtItomNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtItomNoActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
                        setVisible(false);
                        BookCatelogueCashier ob1=new BookCatelogueCashier();
                        //ob1.setUpLoading();
                        ob1.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CashierDashboardLastEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CashierDashboardLastEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CashierDashboardLastEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CashierDashboardLastEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CashierDashboardLastEdit().setVisible(true);
            }
        });
    }
    
    
    /*
    create table sales(
    Sid int primary key,
    ISBN_NO char(12),
    Title varchar(255),
    Quantity int,
    Discount_Rate float,
    Total float
    
    );
    */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBTN;
    private javax.swing.JTextArea bill;
    private javax.swing.JButton btnBalance;
    private com.toedter.calendar.demo.DateChooserPanel dateChooserPanel1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField qty;
    private javax.swing.JPanel ramount;
    private javax.swing.JTextField subtotal;
    private javax.swing.JTextField txtBillNo;
    private javax.swing.JTextField txtCash;
    private javax.swing.JTextField txtISBN_NO;
    private javax.swing.JTextField txtItomNo;
    private javax.swing.JButton txtRemove;
    // End of variables declaration//GEN-END:variables
}
